// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: blade_ingestion.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BLADEIngestionService_AddBLADESource_FullMethodName         = "/blade.BLADEIngestionService/AddBLADESource"
	BLADEIngestionService_ListBLADESources_FullMethodName       = "/blade.BLADEIngestionService/ListBLADESources"
	BLADEIngestionService_RemoveBLADESource_FullMethodName      = "/blade.BLADEIngestionService/RemoveBLADESource"
	BLADEIngestionService_QueryBLADE_FullMethodName             = "/blade.BLADEIngestionService/QueryBLADE"
	BLADEIngestionService_GetBLADEItem_FullMethodName           = "/blade.BLADEIngestionService/GetBLADEItem"
	BLADEIngestionService_IngestBLADEItem_FullMethodName        = "/blade.BLADEIngestionService/IngestBLADEItem"
	BLADEIngestionService_BulkIngestBLADE_FullMethodName        = "/blade.BLADEIngestionService/BulkIngestBLADE"
	BLADEIngestionService_StartBLADESync_FullMethodName         = "/blade.BLADEIngestionService/StartBLADESync"
	BLADEIngestionService_StopBLADESync_FullMethodName          = "/blade.BLADEIngestionService/StopBLADESync"
	BLADEIngestionService_GetSyncStatus_FullMethodName          = "/blade.BLADEIngestionService/GetSyncStatus"
	BLADEIngestionService_StartBLADEQueryJob_FullMethodName     = "/blade.BLADEIngestionService/StartBLADEQueryJob"
	BLADEIngestionService_GetBLADEQueryJobStatus_FullMethodName = "/blade.BLADEIngestionService/GetBLADEQueryJobStatus"
	BLADEIngestionService_HealthCheck_FullMethodName            = "/blade.BLADEIngestionService/HealthCheck"
)

// BLADEIngestionServiceClient is the client API for BLADEIngestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BLADEIngestionServiceClient interface {
	// Add a BLADE data source
	AddBLADESource(ctx context.Context, in *DataSource, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List all configured BLADE data sources
	ListBLADESources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DataSourceList, error)
	// Remove a BLADE data source
	RemoveBLADESource(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Query BLADE data by type
	QueryBLADE(ctx context.Context, in *BLADEQuery, opts ...grpc.CallOption) (*BLADEQueryResponse, error)
	// Get a specific BLADE item
	GetBLADEItem(ctx context.Context, in *BLADEItemRequest, opts ...grpc.CallOption) (*BLADEItem, error)
	// Ingest a specific BLADE item to catalog
	IngestBLADEItem(ctx context.Context, in *BLADEItemRequest, opts ...grpc.CallOption) (*IngestionResponse, error)
	// Bulk ingest BLADE items
	BulkIngestBLADE(ctx context.Context, in *BulkIngestionRequest, opts ...grpc.CallOption) (*IngestionResponse, error)
	// Start a BLADE sync job
	StartBLADESync(ctx context.Context, in *SyncJobRequest, opts ...grpc.CallOption) (*JobResponse, error)
	// Stop a running sync job
	StopBLADESync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*JobResponse, error)
	// Get sync job status
	GetSyncStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SyncStatusResponse, error)
	// Start async BLADE query job
	StartBLADEQueryJob(ctx context.Context, in *BLADEQueryJobRequest, opts ...grpc.CallOption) (*JobResponse, error)
	// Get BLADE query job status
	GetBLADEQueryJobStatus(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobStatusResponse, error)
	// Health check endpoint
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type bLADEIngestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBLADEIngestionServiceClient(cc grpc.ClientConnInterface) BLADEIngestionServiceClient {
	return &bLADEIngestionServiceClient{cc}
}

func (c *bLADEIngestionServiceClient) AddBLADESource(ctx context.Context, in *DataSource, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BLADEIngestionService_AddBLADESource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLADEIngestionServiceClient) ListBLADESources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DataSourceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataSourceList)
	err := c.cc.Invoke(ctx, BLADEIngestionService_ListBLADESources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLADEIngestionServiceClient) RemoveBLADESource(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BLADEIngestionService_RemoveBLADESource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLADEIngestionServiceClient) QueryBLADE(ctx context.Context, in *BLADEQuery, opts ...grpc.CallOption) (*BLADEQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BLADEQueryResponse)
	err := c.cc.Invoke(ctx, BLADEIngestionService_QueryBLADE_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLADEIngestionServiceClient) GetBLADEItem(ctx context.Context, in *BLADEItemRequest, opts ...grpc.CallOption) (*BLADEItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BLADEItem)
	err := c.cc.Invoke(ctx, BLADEIngestionService_GetBLADEItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLADEIngestionServiceClient) IngestBLADEItem(ctx context.Context, in *BLADEItemRequest, opts ...grpc.CallOption) (*IngestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestionResponse)
	err := c.cc.Invoke(ctx, BLADEIngestionService_IngestBLADEItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLADEIngestionServiceClient) BulkIngestBLADE(ctx context.Context, in *BulkIngestionRequest, opts ...grpc.CallOption) (*IngestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestionResponse)
	err := c.cc.Invoke(ctx, BLADEIngestionService_BulkIngestBLADE_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLADEIngestionServiceClient) StartBLADESync(ctx context.Context, in *SyncJobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, BLADEIngestionService_StartBLADESync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLADEIngestionServiceClient) StopBLADESync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*JobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, BLADEIngestionService_StopBLADESync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLADEIngestionServiceClient) GetSyncStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SyncStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncStatusResponse)
	err := c.cc.Invoke(ctx, BLADEIngestionService_GetSyncStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLADEIngestionServiceClient) StartBLADEQueryJob(ctx context.Context, in *BLADEQueryJobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, BLADEIngestionService_StartBLADEQueryJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLADEIngestionServiceClient) GetBLADEQueryJobStatus(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobStatusResponse)
	err := c.cc.Invoke(ctx, BLADEIngestionService_GetBLADEQueryJobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLADEIngestionServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, BLADEIngestionService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BLADEIngestionServiceServer is the server API for BLADEIngestionService service.
// All implementations must embed UnimplementedBLADEIngestionServiceServer
// for forward compatibility.
type BLADEIngestionServiceServer interface {
	// Add a BLADE data source
	AddBLADESource(context.Context, *DataSource) (*emptypb.Empty, error)
	// List all configured BLADE data sources
	ListBLADESources(context.Context, *emptypb.Empty) (*DataSourceList, error)
	// Remove a BLADE data source
	RemoveBLADESource(context.Context, *DataSourceRequest) (*emptypb.Empty, error)
	// Query BLADE data by type
	QueryBLADE(context.Context, *BLADEQuery) (*BLADEQueryResponse, error)
	// Get a specific BLADE item
	GetBLADEItem(context.Context, *BLADEItemRequest) (*BLADEItem, error)
	// Ingest a specific BLADE item to catalog
	IngestBLADEItem(context.Context, *BLADEItemRequest) (*IngestionResponse, error)
	// Bulk ingest BLADE items
	BulkIngestBLADE(context.Context, *BulkIngestionRequest) (*IngestionResponse, error)
	// Start a BLADE sync job
	StartBLADESync(context.Context, *SyncJobRequest) (*JobResponse, error)
	// Stop a running sync job
	StopBLADESync(context.Context, *emptypb.Empty) (*JobResponse, error)
	// Get sync job status
	GetSyncStatus(context.Context, *emptypb.Empty) (*SyncStatusResponse, error)
	// Start async BLADE query job
	StartBLADEQueryJob(context.Context, *BLADEQueryJobRequest) (*JobResponse, error)
	// Get BLADE query job status
	GetBLADEQueryJobStatus(context.Context, *JobRequest) (*JobStatusResponse, error)
	// Health check endpoint
	HealthCheck(context.Context, *emptypb.Empty) (*HealthResponse, error)
	mustEmbedUnimplementedBLADEIngestionServiceServer()
}

// UnimplementedBLADEIngestionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBLADEIngestionServiceServer struct{}

func (UnimplementedBLADEIngestionServiceServer) AddBLADESource(context.Context, *DataSource) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBLADESource not implemented")
}
func (UnimplementedBLADEIngestionServiceServer) ListBLADESources(context.Context, *emptypb.Empty) (*DataSourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBLADESources not implemented")
}
func (UnimplementedBLADEIngestionServiceServer) RemoveBLADESource(context.Context, *DataSourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBLADESource not implemented")
}
func (UnimplementedBLADEIngestionServiceServer) QueryBLADE(context.Context, *BLADEQuery) (*BLADEQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBLADE not implemented")
}
func (UnimplementedBLADEIngestionServiceServer) GetBLADEItem(context.Context, *BLADEItemRequest) (*BLADEItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBLADEItem not implemented")
}
func (UnimplementedBLADEIngestionServiceServer) IngestBLADEItem(context.Context, *BLADEItemRequest) (*IngestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestBLADEItem not implemented")
}
func (UnimplementedBLADEIngestionServiceServer) BulkIngestBLADE(context.Context, *BulkIngestionRequest) (*IngestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkIngestBLADE not implemented")
}
func (UnimplementedBLADEIngestionServiceServer) StartBLADESync(context.Context, *SyncJobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBLADESync not implemented")
}
func (UnimplementedBLADEIngestionServiceServer) StopBLADESync(context.Context, *emptypb.Empty) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBLADESync not implemented")
}
func (UnimplementedBLADEIngestionServiceServer) GetSyncStatus(context.Context, *emptypb.Empty) (*SyncStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncStatus not implemented")
}
func (UnimplementedBLADEIngestionServiceServer) StartBLADEQueryJob(context.Context, *BLADEQueryJobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBLADEQueryJob not implemented")
}
func (UnimplementedBLADEIngestionServiceServer) GetBLADEQueryJobStatus(context.Context, *JobRequest) (*JobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBLADEQueryJobStatus not implemented")
}
func (UnimplementedBLADEIngestionServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedBLADEIngestionServiceServer) mustEmbedUnimplementedBLADEIngestionServiceServer() {}
func (UnimplementedBLADEIngestionServiceServer) testEmbeddedByValue()                               {}

// UnsafeBLADEIngestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BLADEIngestionServiceServer will
// result in compilation errors.
type UnsafeBLADEIngestionServiceServer interface {
	mustEmbedUnimplementedBLADEIngestionServiceServer()
}

func RegisterBLADEIngestionServiceServer(s grpc.ServiceRegistrar, srv BLADEIngestionServiceServer) {
	// If the following call pancis, it indicates UnimplementedBLADEIngestionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BLADEIngestionService_ServiceDesc, srv)
}

func _BLADEIngestionService_AddBLADESource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLADEIngestionServiceServer).AddBLADESource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BLADEIngestionService_AddBLADESource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLADEIngestionServiceServer).AddBLADESource(ctx, req.(*DataSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLADEIngestionService_ListBLADESources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLADEIngestionServiceServer).ListBLADESources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BLADEIngestionService_ListBLADESources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLADEIngestionServiceServer).ListBLADESources(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLADEIngestionService_RemoveBLADESource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLADEIngestionServiceServer).RemoveBLADESource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BLADEIngestionService_RemoveBLADESource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLADEIngestionServiceServer).RemoveBLADESource(ctx, req.(*DataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLADEIngestionService_QueryBLADE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BLADEQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLADEIngestionServiceServer).QueryBLADE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BLADEIngestionService_QueryBLADE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLADEIngestionServiceServer).QueryBLADE(ctx, req.(*BLADEQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLADEIngestionService_GetBLADEItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BLADEItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLADEIngestionServiceServer).GetBLADEItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BLADEIngestionService_GetBLADEItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLADEIngestionServiceServer).GetBLADEItem(ctx, req.(*BLADEItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLADEIngestionService_IngestBLADEItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BLADEItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLADEIngestionServiceServer).IngestBLADEItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BLADEIngestionService_IngestBLADEItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLADEIngestionServiceServer).IngestBLADEItem(ctx, req.(*BLADEItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLADEIngestionService_BulkIngestBLADE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkIngestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLADEIngestionServiceServer).BulkIngestBLADE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BLADEIngestionService_BulkIngestBLADE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLADEIngestionServiceServer).BulkIngestBLADE(ctx, req.(*BulkIngestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLADEIngestionService_StartBLADESync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLADEIngestionServiceServer).StartBLADESync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BLADEIngestionService_StartBLADESync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLADEIngestionServiceServer).StartBLADESync(ctx, req.(*SyncJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLADEIngestionService_StopBLADESync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLADEIngestionServiceServer).StopBLADESync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BLADEIngestionService_StopBLADESync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLADEIngestionServiceServer).StopBLADESync(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLADEIngestionService_GetSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLADEIngestionServiceServer).GetSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BLADEIngestionService_GetSyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLADEIngestionServiceServer).GetSyncStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLADEIngestionService_StartBLADEQueryJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BLADEQueryJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLADEIngestionServiceServer).StartBLADEQueryJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BLADEIngestionService_StartBLADEQueryJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLADEIngestionServiceServer).StartBLADEQueryJob(ctx, req.(*BLADEQueryJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLADEIngestionService_GetBLADEQueryJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLADEIngestionServiceServer).GetBLADEQueryJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BLADEIngestionService_GetBLADEQueryJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLADEIngestionServiceServer).GetBLADEQueryJobStatus(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLADEIngestionService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLADEIngestionServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BLADEIngestionService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLADEIngestionServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BLADEIngestionService_ServiceDesc is the grpc.ServiceDesc for BLADEIngestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BLADEIngestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blade.BLADEIngestionService",
	HandlerType: (*BLADEIngestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBLADESource",
			Handler:    _BLADEIngestionService_AddBLADESource_Handler,
		},
		{
			MethodName: "ListBLADESources",
			Handler:    _BLADEIngestionService_ListBLADESources_Handler,
		},
		{
			MethodName: "RemoveBLADESource",
			Handler:    _BLADEIngestionService_RemoveBLADESource_Handler,
		},
		{
			MethodName: "QueryBLADE",
			Handler:    _BLADEIngestionService_QueryBLADE_Handler,
		},
		{
			MethodName: "GetBLADEItem",
			Handler:    _BLADEIngestionService_GetBLADEItem_Handler,
		},
		{
			MethodName: "IngestBLADEItem",
			Handler:    _BLADEIngestionService_IngestBLADEItem_Handler,
		},
		{
			MethodName: "BulkIngestBLADE",
			Handler:    _BLADEIngestionService_BulkIngestBLADE_Handler,
		},
		{
			MethodName: "StartBLADESync",
			Handler:    _BLADEIngestionService_StartBLADESync_Handler,
		},
		{
			MethodName: "StopBLADESync",
			Handler:    _BLADEIngestionService_StopBLADESync_Handler,
		},
		{
			MethodName: "GetSyncStatus",
			Handler:    _BLADEIngestionService_GetSyncStatus_Handler,
		},
		{
			MethodName: "StartBLADEQueryJob",
			Handler:    _BLADEIngestionService_StartBLADEQueryJob_Handler,
		},
		{
			MethodName: "GetBLADEQueryJobStatus",
			Handler:    _BLADEIngestionService_GetBLADEQueryJobStatus_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _BLADEIngestionService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blade_ingestion.proto",
}
